#include <iostream>
#include <portaudio.h>
#include <sndfile.h>

#define FRAMES_PER_BUFFER 512

typedef struct {
    SNDFILE *file;
    SF_INFO sfinfo;
} paData;

static int callback(const void *inputBuffer, void *outputBuffer,
                    unsigned long framesPerBuffer,
                    const PaStreamCallbackTimeInfo *timeInfo,
                    PaStreamCallbackFlags statusFlags,
                    void *userData) {
    paData *data = (paData *)userData;
    float *out = (float *)outputBuffer;
    sf_count_t readcount = sf_read_float(data->file, out, framesPerBuffer * data->sfinfo.channels);
    if (readcount < framesPerBuffer) {
        int remaining = (framesPerBuffer - readcount) * data->sfinfo.channels;
        while (remaining-- > 0) *out++ = 0;
    }
    return paContinue;
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <wav file>\n";
        return 1;
    }

    PaStream *stream;
    paData data;
    PaError err;

    data.file = sf_open(argv[1], SFM_READ, &data.sfinfo);
    if (!data.file) {
        std::cerr << "Cannot open file " << argv[1] << "\n";
        return 1;
    }

    err = Pa_Initialize();
    if (err != paNoError) goto error;

    err = Pa_OpenDefaultStream(&stream, 0, data.sfinfo.channels, paFloat32, data.sfinfo.samplerate, FRAMES_PER_BUFFER, callback, &data);
    if (err != paNoError) goto error;

    err = Pa_StartStream(stream);
    if (err != paNoError) goto error;

    while (Pa_IsStreamActive(stream) == 1) Pa_Sleep(100);

    err = Pa_StopStream(stream);
    if (err != paNoError) goto error;

    err = Pa_CloseStream(stream);
    if (err != paNoError) goto error;

    Pa_Terminate();
    sf_close(data.file);
    return 0;

error:
    Pa_Terminate();
    sf_close(data.file);
    std::cerr << "An error occurred while using PortAudio\n";
    std::cerr << "Error number: " << err << "\n";
    std::cerr << "Error message: " << Pa_GetErrorText(err) << "\n";
    return 1;
}